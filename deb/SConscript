import os, shutil, sys
Import('env')
Import('library')
import SCons.Errors

# Here's the core info for the package
DEBNAME = 'riakcpp'
DEBVERSION = "0.2a"
DEBMAINT = "Andres Jaan Tack [andres.jaan.tack@eesti.ee]"
DEBDESC = "A Riak client library for use with C++11 compilers."

# Determine platform-specific info, including whether we support this platform.
if sys.platform == 'linux2':
    DEBARCH = os.popen('dpkg --print-architecture').read().strip()
    platform_codename = os.popen("lsb_release -c").read().strip()
    if platform_codename == "Codename:\toneiric":
        DEBDEPENDS = "libprotobuf-dev, libboost1.46-all-dev"
    elif platform_codename == "Codename:\tsqueeze":
        DEBDEPENDS = "libprotobuf-dev, libboost1.42-all-dev"
    else:
        raise SCons.Errors.UserError, "Dependencies for your %s system are unknown." % platform_codename
else:
    raise SCons.Errors.UserError, "Packaging for %s systems has not been implemented!" % sys.platform

DEBFILES = [
    ("usr/include/riak/riakclient.pb.h", "#build/riak/riakclient.pb.h"),

    # TODO: Generate these automatically
    ("usr/include/riak/client.hxx",                          "#riak/client.hxx"),
    ("usr/include/riak/error.hxx",                           "#riak/error.hxx"),
    ("usr/include/riak/core_types.hxx",                      "#riak/core_types.hxx"),
    ("usr/include/riak/message.hxx",                         "#riak/message.hxx"),
    ("usr/include/riak/object_access_parameters.hxx",        "#riak/object_access_parameters.hxx"),
    ("usr/include/riak/request_failure_parameters.hxx",      "#riak/request_failure_parameters.hxx"),
    ("usr/include/riak/request_with_timeout.hxx",            "#riak/request_with_timeout.hxx"),
    ("usr/include/riak/response_handlers.hxx",               "#riak/response_handlers.hxx"),
    ("usr/include/riak/sibling_resolution.hxx",              "#riak/sibling_resolution.hxx"),
    ("usr/include/riak/transport.hxx",                       "#riak/transport.hxx"),
    ("usr/include/riak/utilities.hxx",                       "#riak/utilities.hxx"),
    ("usr/include/riak/transports/single_serial_socket.hxx", "#riak/transports/single_serial_socket.hxx"),

    ("usr/lib/libriak.a", "#libriak.a"),
]
    
# This is the debian package we're going to create
debpkg = '#%s_%s-%s.deb' % (DEBNAME, DEBVERSION, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias("debian", debpkg)

DEBCONTROLFILE = os.path.join(DEBNAME, "DEBIAN/control")

# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:

CONTROL_TEMPLATE = """
Package: %s
Priority: extra
Section: misc
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s
Depends: %s
Description: %s
"""

env.Depends(debpkg, DEBCONTROLFILE)
env.Depends(debpkg, library)
env.Depends(DEBCONTROLFILE, '#deb/SConscript')

# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (DEBNAME, installed_size, DEBMAINT, DEBARCH, DEBVERSION, DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()

# We can generate the control file by calling make_control
env.Command(DEBCONTROLFILE, None, make_control)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, DEBCONTROLFILE, "dpkg-deb -b %s %s" % ("deb/%s" % DEBNAME, "$TARGET"))
