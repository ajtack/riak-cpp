#pragma once
#include <riak/utility/timer_factory.hxx>

namespace boost {
	namespace asio { class io_service; }
}

//=============================================================================
namespace riak {
	namespace utility {
//=============================================================================

/*!
 * Implements the generic timer_factory interface, producing timers implemented using 
 * boost deadline_timers.
 */
class boost_deadline_timer_factory
      : public timer_factory
{
  public:
	/*!
	 * \param ios must be maintained at least as long as all of the timers generated by this
	 *     factory, or the behavior is undefined.
	 */
	boost_deadline_timer_factory (boost::asio::io_service& ios);

	virtual std::unique_ptr<timer> create ();

  private:
	boost::asio::io_service& ios_;
};

//=============================================================================
	}   // namespace utility
}   // namespace riak
//=============================================================================
